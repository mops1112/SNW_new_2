
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.embed.swing.JFXPanel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import org.json.JSONArray;
import org.json.JSONObject;
import project_sanwa_new.DBArea;
import project_sanwa_new.DBDetail;
import project_sanwa_new.DBDragoConnex;
import project_sanwa_new.DBRoom;
import project_sanwa_new.DBSites;
import project_sanwa_new.Database;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author yotsathon
 */
public class Manages extends JPanel implements MouseListener {

    /**
     * Creates new form Manages
     */
    JPanel dataSetup;
    JPanel siteManage;
    JPanel areaManage;
    JPanel dragoConnexManage;
    JPanel roomManage;
    JLabel dataSetupText;
    JLabel siteManageText;

    public Manages() {
        initComponents();
        this.setOpaque(false);
        this.setLayout(new FlowLayout(FlowLayout.LEFT, 3, 3));
        dataSetup = new SubMenuSetting("Get A New DataSet");
        dataSetup.addMouseListener(this);
        siteManage = new SubMenuSetting("Site Management");
        siteManage.addMouseListener(this);

        areaManage = new SubMenuSetting("Area Management");
        areaManage.addMouseListener(this);

        dragoConnexManage = new SubMenuSetting("DragoConnex Management");
        dragoConnexManage.addMouseListener(this);

        roomManage = new SubMenuSetting("Room Management");
        roomManage.addMouseListener(this);

        add(dataSetup);
        add(siteManage);
        add(areaManage);
        add(dragoConnexManage);
        add(roomManage);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void mouseClicked(MouseEvent e) {
        if (e.getSource() == dataSetup) {
            if (JOptionPane.showConfirmDialog(null, "Would You Like to Get A New DataSet?", "WARNING",
                    JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                try {
                    boolean rs = setupData();
                    if (rs) {
                        JOptionPane.showMessageDialog(null, "Download Complete", "", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(null, "Download Fail", "", JOptionPane.INFORMATION_MESSAGE);
                    }
                } catch (IOException | SQLException ex) {
                    Logger.getLogger(Manages.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                // no option
            }

        } else if (e.getSource() == siteManage) {
            JFrame edit = new JFrame();
            edit.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            edit.setPreferredSize(new Dimension(900, 600));
            SiteManagement siteManagement = new SiteManagement();
            edit.add(siteManagement);
            edit.pack();
            edit.setLocationRelativeTo(null);
            edit.setVisible(true);

        } else if (e.getSource() == roomManage) {
            JFrame edit = new JFrame();
            edit.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            edit.setPreferredSize(new Dimension(900, 600));
            RoomManagement roomManagement = new RoomManagement();
            edit.add(roomManagement);
            edit.pack();
            edit.setLocationRelativeTo(null);
            edit.setVisible(true);
        }
    }

    private boolean setupData() throws IOException, SQLException {
//        ImageIcon icon = new ImageIcon("/project_sanwa_new/img/gears.gif");
//        JLabel loading = new JLabel("Loading...", icon, JLabel.CENTER);
//        JButton aa = new JButton("loadinf");
//        Object[] array = {aa};
//        JOptionPane optionPane = new JOptionPane(array,"Hello world", JOptionPane.INFORMATION_MESSAGE, JOptionPane.DEFAULT_OPTION, null, null);
//        JDialog dialog = new JDialog();
//        dialog.setTitle("Message");
//        dialog.setModal(true);
//
//        dialog.setContentPane(optionPane);
//
//        dialog.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);
//        dialog.setLocationRelativeTo(null);
//        dialog.pack();
//        dialog.setVisible(true);
        

//        JDialog dialogWait = new JDialog();
//        dialogWait.setContentPane(optionPane);
//        dialogWait.setPreferredSize(new Dimension(300, 300));
//        dialogWait.setLocationRelativeTo(null);
//        dialogWait.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);
//        dialogWait.setVisible(true);
//        dialogWait.pack();
        Database db = new Database();
        DBSites dbS = new DBSites();
        DBArea dbA = new DBArea();
        DBDragoConnex dbDC = new DBDragoConnex();
        DBRoom dbR = new DBRoom();
        DBDetail dbD = new DBDetail();

        
        dbS.connect();
        dbA.connect();
        dbDC.connect();
        dbR.connect();
        
        URL url;
        BufferedReader in;
        JSONObject obj = null;
        Boolean rs = true;

        try {
            url = new URL("http://dragoservices.azurewebsites.net/api/DragoServices/Owners");
            in = new BufferedReader(new InputStreamReader(url.openStream()));
            String line = in.readLine();

            if (!"[]".equals(line)) {
                obj = new JSONObject(line);
                dbS.deleteAllSite();
                dbA.deleteAllArea();
                dbDC.deleteAlldragoConnex();
                dbD.deleteAllDetail();
                for (int i = 0; i < obj.getJSONArray("sites").length(); i++) {
                    dbS.insertSite((obj.getJSONArray("sites")).getJSONObject(i).get("siteID").toString(), (obj.getJSONArray("sites")).getJSONObject(i).get("code").toString(), (obj.getJSONArray("sites")).getJSONObject(i).get("description").toString(), (obj.getJSONArray("sites")).getJSONObject(i).get("createdDateTime").toString(), (obj.getJSONArray("sites")).getJSONObject(i).get("updatedDateTime").toString(), (obj.getJSONArray("sites")).getJSONObject(i).get("isActive").toString(), (obj.getJSONArray("sites")).getJSONObject(i).get("address").toString());
                }
                for (int i = 0; i < obj.getJSONArray("areas").length(); i++) {
                    dbA.insertArea((obj.getJSONArray("areas")).getJSONObject(i).get("areaID").toString(), (obj.getJSONArray("areas")).getJSONObject(i).get("siteID").toString(), (obj.getJSONArray("areas")).getJSONObject(i).get("code").toString(), (obj.getJSONArray("areas")).getJSONObject(i).get("description").toString());
                }
                for (int i = 0; i < obj.getJSONArray("dragoConnexes").length(); i++) {
                    dbDC.insertDragoConnex((obj.getJSONArray("dragoConnexes")).getJSONObject(i).get("dragoConnexID").toString(), (obj.getJSONArray("dragoConnexes")).getJSONObject(i).get("areaID").toString(), (obj.getJSONArray("dragoConnexes")).getJSONObject(i).get("description").toString(), (obj.getJSONArray("dragoConnexes")).getJSONObject(i).get("createdDateTime").toString(), (obj.getJSONArray("dragoConnexes")).getJSONObject(i).get("updatedDateTime").toString(), (obj.getJSONArray("dragoConnexes")).getJSONObject(i).get("isActive").toString());
                }
                dbD.connect();
                for (int i = 0; i < obj.getJSONArray("meters").length(); i++) {
                    JSONObject roomNumber = new JSONObject((obj.getJSONArray("meters")).getJSONObject(i).get("meterSetting").toString());
                    dbR.insertRoom((obj.getJSONArray("meters")).getJSONObject(i).get("mBusID").toString(), (obj.getJSONArray("meters")).getJSONObject(i).get("dragoConnexID").toString(), roomNumber.get("RoomNumber").toString(), roomNumber.get("HighTreshold").toString());
                    
                }
                db.connect();
                db.setStatusStartProgram("1");
                db.close();
                
                dbR.close();
                dbD.close();
                
            }
        } catch (MalformedURLException ex) {
            rs = false;
            Logger.getLogger(Manages.class.getName()).log(Level.SEVERE, null, ex);
        }
//        dialog.dispose();
        return rs;
    }

    @Override
    public void mousePressed(MouseEvent e) {
    }

    @Override
    public void mouseReleased(MouseEvent e) {
    }

    @Override
    public void mouseEntered(MouseEvent e) {
        if (e.getSource() == dataSetup) {
            System.out.println("rrrrrrrrrrrrrrrrrrrrrrrrrrrrr");
        }
    }

    @Override
    public void mouseExited(MouseEvent e) {
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
