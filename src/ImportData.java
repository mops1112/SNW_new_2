
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import project_sanwa_new.DBBuilding;
import project_sanwa_new.DBRoom;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author yotsathon
 */
public class ImportData extends javax.swing.JPanel implements ActionListener {

    /**
     * Creates new form ImportData
     */
    static private final String newline = "\n";
    JFileChooser fc;
    JTextArea log;
    JButton openButton;
    JButton saveButton;
    JTable table;

    public ImportData() {
        initComponents();
        fc = new JFileChooser();
        log = new JTextArea(5, 20);
        log.setMargin(new Insets(5, 5, 5, 5));
        log.setEditable(false);
        openButton = new JButton("Select File...");
        saveButton = new JButton("Import Data");
        JPanel buttonPanel = new JPanel(); //use FlowLayout
        JScrollPane logScrollPane = new JScrollPane(log);
        buttonPanel.add(openButton);
        buttonPanel.add(saveButton);
        openButton.addActionListener(this);
        saveButton.addActionListener(this);
        table = new JTable();
        table.setPreferredScrollableViewportSize(new Dimension(800, 600));
        table.setFillsViewportHeight(true);
        JScrollPane scrollPane = new JScrollPane(table);

        add(buttonPanel, BorderLayout.PAGE_START);

        //add(logScrollPane, BorderLayout.CENTER);
        add(scrollPane, BorderLayout.CENTER);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == openButton) {
            int returnVal = fc.showOpenDialog(ImportData.this);

            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File file = fc.getSelectedFile();
                //This is where a real application would open the file.
                log.append("Opening: " + file.getName() + "." + newline);
                try {
                    readExcel(file.getPath());
                } catch (IOException ex) {
                    Logger.getLogger(ImportData.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                log.append("Open command cancelled by user." + newline);
            }
            log.setCaretPosition(log.getDocument().getLength());
            ;

        } else if (e.getSource() == saveButton) {

            DBBuilding dbB = new DBBuilding();
            DBRoom dbR = new DBRoom();
            dbB.connect();
            dbR.connect();
            
            int columnConnex =  getColumnByName(table, "Connex_ID");
            int columnBuildingName = getColumnByName(table, "BuildingName");
            for(int i=1;i<=table.getRowCount();i++){
                //Building
                ResultSet buildingRs = dbB.selectBuildingByconnexID(table.getValueAt(i,columnConnex).toString());
                //ResiltSet roomRs = dbR.
                try {
                    if (!buildingRs.next()) {
                        dbB.insertBuilding(table.getValueAt(i,columnConnex).toString(), table.getValueAt(i,columnBuildingName).toString(), "user");
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(ImportData.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                
                
          
            }
            

        }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}

    private int getColumnByName(JTable table, String name) {
        for (int i = 0; i < table.getColumnCount(); ++i) {
            if (table.getColumnName(i).equals(name)) {
                return i;
            }
        }
        return -1;
    }

    private void readExcel(String fileName) throws FileNotFoundException, IOException {

        FileInputStream file = new FileInputStream(fileName);
//Get the workbook instance for XLS file 
        HSSFWorkbook workbook = new HSSFWorkbook(file);

//Get first sheet from the workbook
        HSSFSheet sheet = workbook.getSheetAt(0);

//Get iterator to all the rows in current sheet
        Iterator<Row> rowIterator = sheet.iterator();

        ArrayList<String> columnTable = new ArrayList();
        List<ArrayList> listData = new ArrayList();
        while (rowIterator.hasNext()) {
            Row row = rowIterator.next();

            ArrayList<String> ob_data = new ArrayList();
            //For each row, iterate through each columns
            Iterator<Cell> cellIterator = row.cellIterator();
            while (cellIterator.hasNext()) {

                Cell cell = cellIterator.next();
                if (row.getRowNum() == 0) {
                    columnTable.add(cell.getStringCellValue());
                } else {
                    ob_data.add(cell.getStringCellValue());

                }

            }
            listData.add(ob_data);
        }
        file.close();
        listData.remove(0);
        genTable(columnTable, listData);

    }

    private void genTable(ArrayList columnTable, List dataTable) {

        String[] columnNames = new String[columnTable.size()];
        columnTable.toArray(columnNames);
        DefaultTableModel model = new DefaultTableModel(new Object[0][0], columnNames);

        for (int i = 0; i < dataTable.size(); i++) {
            List a = (List) dataTable.get(i);
            String[] b = new String[a.size()];
            a.toArray(b);
            model.addRow(a.toArray(b));
        }

        table.setModel(model);

    }
}
