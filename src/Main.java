
import java.awt.AWTEventMulticaster;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.scene.control.ProgressBar;
import javax.swing.BorderFactory;
import javax.swing.JComboBox;
import javax.swing.JDesktopPane;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.UIManager;
import javax.swing.border.Border;
import javax.swing.table.DefaultTableModel;
import jdk.nashorn.internal.codegen.CompilerConstants;
import org.json.JSONArray;
import org.json.JSONObject;
import org.netbeans.lib.awtextra.AbsoluteLayout;
import project_sanwa_new.Alert;
import project_sanwa_new.DBDetail;
import project_sanwa_new.DBRoom;
import project_sanwa_new.DataAlert;
import project_sanwa_new.Database;
import project_sanwa_new.ListAlert;
import project_sanwa_new.Room;
import project_sanwa_new.Sanwa;
import project_sanwa_new.StateCheck;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author yotsathon
 */
public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    static ViewTable viewTable;
    static ViewTable1 viewTable1;
    static Home home;
    static ImportData importData;
    static Manages manage;

    public static List<DataAlert> listDataAlert;
    public static List<Alert> alert;
    static ListAlert listAlert;
    static Map<String, String> startDateTime;
    static String dateTime;
    Menu menuHome;
    Menu menuViewDataTable;
    Menu menuManage;
    Menu menuView;
    JPanel menu;
    JPanel content;
    static JProgressBar progressBar;

    public Main() {
        initComponents();
        content = new JPanel();
        content.setBackground(new Color(33, 150, 243));
        home = new Home();
        viewTable = new ViewTable();
        viewTable1 = new ViewTable1();
        manage = new Manages();
        progressBar = new JProgressBar();
        progressBar.setBackground(new java.awt.Color(255, 0, 0));
        progressBar.setFont(new java.awt.Font("Times New Roman", 0, 12));
        progressBar.setStringPainted(true);
        progressBar.setForeground(Color.blue);

        menu = new JPanel();
        menu.setBackground(new Color(19, 78, 220));

        menuHome = new Menu("HOME", "/project_sanwa_new/img/Home_64px.png", content, home);
        menuViewDataTable = new Menu("DATA TABLE", "/project_sanwa_new/img/Organization_64px.png", content, viewTable);
        menuManage = new Menu("SETTING", "/project_sanwa_new/img/Settings_64px.png", content, manage);
        menuView = new Menu("VIEW", "/project_sanwa_new/img/Organization_64px.png", content, viewTable1);

        menu.add(menuHome);
        menu.add(menuViewDataTable);
        menu.add(menuView);
        menu.add(menuManage);

        menu.add(progressBar);

        add(menu, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 100, 768));
        add(content, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 0, 945, 768));

        importData = new ImportData();

        this.setVisible(true);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Main");
        setMaximumSize(new java.awt.Dimension(1024, 768));
        setMinimumSize(new java.awt.Dimension(1024, 768));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void loadData() {
        StateCheck sc = new StateCheck();
        sc.state = false;
        Runnable runnable2 = new Runnable() {
            public void run() {
                synchronized (sc) {

                    try {
                        sc.wait();
                        getDataToAlert();
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }

            }
        };
        new Thread(runnable2).start();

        Runnable runnable = new Runnable() {
            public void run() {
                synchronized (sc) {
                    try {
                        Database db = new Database();
                        db.connect();
                        if (db.getStatusStartProgram()) {
                            
                            getRoomDetailFromServer();
                            sc.state = true;
                            sc.notifyAll();
                        }
                        db.close();

                    } catch (IOException ex) {
                        Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (SQLException ex) {
                        Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }

            }
        };
        new Thread(runnable).start();

    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        new Main().setVisible(true);
        Timer time = new Timer();
        time.schedule(new TimerTask() {
            public void run() {
                loadData();
            }

        }, 0, 1000 * 100);

    }

    public static void getRoomDetailFromServer() throws IOException, SQLException {
        DBRoom dbR = new DBRoom();
        DBDetail dbD = new DBDetail();
        dbR.connect();
        dbD.connect();

        Sanwa sw = new Sanwa();
        Map<String, String> startDateTime = sw.getCurentDateTime();
        //ResultSet rs = dbR.selectRoomByBuildingFloor(null, null);

        float progress = 1;
        URL url;
        BufferedReader in;
        JSONArray jsonArray;
        dateTime = startDateTime.get("dateTimeLocal").toString();
//        try {
        url = new URL("http://dragoservices.azurewebsites.net/api/DragoServices/MeterRecord?s=" + startDateTime.get("dateTimeServer") + "%2B0700");
        in = new BufferedReader(new InputStreamReader(url.openStream()));
        String line = in.readLine();
        if (!"[]".equals(line)) {
            jsonArray = new JSONArray(line);
            float count = jsonArray.length();
            for (int i = 0; i < jsonArray.length(); i++) {
                //String t = jsonArray.getJSONObject(i).getJSONArray("records").getJSONObject(0).get("t").toString();
                String mBusID = jsonArray.getJSONObject(i).get("mBusID").toString();
                String dragoConnexID = jsonArray.getJSONObject(i).get("dragoConnexID").toString();
                dragoConnexID = dragoConnexID.substring(2);
                String wFl = jsonArray.getJSONObject(i).getJSONArray("records").getJSONObject(0).get("wFl").toString();
                int rs = dbR.selectIDBymBusIDDateTime(dragoConnexID, mBusID, dateTime);
                if (rs == 0) {
                    ResultSet roomID = dbR.selectRoomIDBymBusID(dragoConnexID, mBusID);
                    if (roomID.next()) {
                        dbD.insertDetailRoomWater(roomID.getString("room_ID").toString(), dateTime, wFl, jsonArray.getJSONObject(i).getJSONArray("records").getJSONObject(0).get("wFw").toString(), jsonArray.getJSONObject(i).getJSONArray("records").getJSONObject(0).get("wRv").toString(), jsonArray.getJSONObject(i).getJSONArray("records").getJSONObject(0).get("wVo").toString());

                    }

                }
                float percen = (progress / count) * 100;
                progressBar.setString(Math.round(percen) + "%");
                progressBar.setValue(Math.round(percen));
                progress++;

            }

        }
        dbD.close();
        dbR.close();
    }

    public static void getDataToAlert() {
        DBRoom dbR = new DBRoom();
        DBDetail dbD = new DBDetail();
        dbR.connect();
        dbD.connect();
        Sanwa sw = new Sanwa();

        listAlert = new ListAlert();
        try {
            ResultSet allRoom = dbR.selectAllRoom();
            while (allRoom.next()) {
                ResultSet alert = dbD.selectWaterDetailToAlert(allRoom.getString("room_ID"), dateTime);
                if (alert.next()) {
                    String date = dateTime.substring(0, 10);
                    String time = dateTime.substring(11);
                    listAlert.setListAlert(alert.getString("siteName"), alert.getString("areaName"), alert.getString("dragoConnexName"), alert.getString("roomNumber"), alert.getString("w_mBusID"), alert.getString("w_limit"), alert.getString("wFw"), date, time);

                }
            }

        } catch (SQLException ex) {
            Logger.getLogger(ViewTable.class.getName()).log(Level.SEVERE, null, ex);
        }

        dbR.close();
        dbD.close();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
